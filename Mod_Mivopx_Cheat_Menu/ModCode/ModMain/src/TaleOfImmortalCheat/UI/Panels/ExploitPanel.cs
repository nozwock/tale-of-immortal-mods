using System;
using EGameTypeData;
using Il2CppSystem.Collections.Generic;
using MOD_Mivopx;
using MOD_Mivopx.UI.Panels;
using TaleOfImmortalCheat.Localization;
using UnhollowerBaseLib;
using UnityEngine;
using UnityEngine.UI;
using UniverseLib.Input;
using UniverseLib.UI;

namespace TaleOfImmortalCheat.UI.Panels;

internal class ExploitPanel : Panel
{
	private const string PanelName = "Exploit";

	private TooltipPanel tooltip = new TooltipPanel("ButtonTooltip");

	private Dictionary<RectTransform, string> buttonTooltips = new Dictionary<RectTransform, string>();

	private Action<ETypeData> callRealmUIEnd;

	private static bool bulbul;

	private bool IsRealmActive;

	private GameObject RealmGO;

	private Dictionary<int, int> orig_CultivateSkillcostNum = new Dictionary<int, int>();

	private Text titleBarText;

	private Toggle toggle_ExploitPanelz;

	private Text text_ExploitPanelz;

	private Toggle toggle_GodMode;

	private Text text_GodMode;

	private Toggle toggle_FastCD;

	private Text text_FastCD;

	private Toggle toggle_InfVitality;

	private Text text_InfVitality;

	private Toggle toggle_OneHit;

	private Text text_OneHit;

	private Toggle toggle_Escape;

	private Text text_Escape;

	private Toggle toggle_DropRate;

	private Text text_DropRate;

	private Toggle toggle_Relation;

	private Text text_Relation;

	private Toggle toggle_Steal;

	private Text text_Steal;

	private Toggle toggle_Mark;

	private Text text_Mark;

	private Toggle toggle_NoDayCostMove;

	private Text text_NoDayCostMove;

	private Toggle toggle_PerfectUps;

	private Text text_PerfectUps;

	private Toggle toggle_Cultivation;

	private Text text_Cultivation;

	private Toggle toggle_Geomantic;

	private Text text_Geomantic;

	private Toggle toggle_MineHerb;

	private Text text_MineHerb;

	private Toggle toggle_EasyMartialLearn;

	private Text text_EasyMartialLearn;

	private Toggle toggle_BaguaJ;

	private Text text_BaguaJ;

	private Toggle toggle_MythicalGourdBuff;

	private Text text_MythicalGourdBuff;

	private Toggle toggle_WardrobeNoCost;

	private Text text_WardrobeNoCost;

	private Toggle toggle_ExactCharisma;

	private Text text_ExactCharisma;

	private Toggle toggle_NPCRealm;

	private Text text_NPCRealm;

	public ExploitPanel()
		: base(isStartedVisible: false)
	{
		UIRefreshManager.OnLanguageChanged += UpdateUITexts;
	}

	~ExploitPanel()
	{
		UIRefreshManager.OnLanguageChanged -= UpdateUITexts;
	}

	private (Toggle toggle, Text text) CreateLocalizedToggle(GameObject parent, string name, string textKey, Action<bool> onValueChanged, string tooltipKey = null)
	{
		UIFactory.CreateToggle(parent, name, out var toggle, out var text);
		toggle.isOn = false;
		text.text = LocalizationHelper.T(textKey);
		toggle.onValueChanged.AddListener(onValueChanged);
		if (!string.IsNullOrEmpty(tooltipKey))
		{
			buttonTooltips[text.gameObject.GetComponent<RectTransform>()] = tooltipKey;
		}
		return (toggle: toggle, text: text);
	}

	public override bool Update(bool allowDragging)
	{
		bool result = base.Update(allowDragging);
		if (base.PanelRoot == null || !base.IsVisible)
		{
			return result;
		}
		Vector3 mousePosition = InputManager.MousePosition;
		tooltip.IsVisible = false;
		Dictionary<RectTransform, string>.Enumerator enumerator = buttonTooltips.GetEnumerator();
		while (enumerator.MoveNext())
		{
			KeyValuePair<RectTransform, string> current = enumerator.Current;
			if (current.Key != null && !string.IsNullOrEmpty(current.Value))
			{
				Vector3 point = current.Key.InverseTransformPoint(mousePosition);
				if (current.Key.rect.Contains(point))
				{
					string label = (current.Value.StartsWith("tooltip_") ? LocalizationHelper.T(current.Value) : current.Value);
					tooltip.TooltipFor(current.Key, label);
					tooltip.IsVisible = true;
					break;
				}
			}
		}
		return result;
	}

	internal override (GameObject panelRoot, GameObject draggableArea) CreateUI(GameObject uiRoot)
	{
		Debug.Log("Cheat UI - Exploit panel");
		GameObject contentHolder;
		GameObject gameObject = UIFactory.CreatePanel("Exploit", uiRoot, out contentHolder);
		UIFactory.SetLayoutGroup<VerticalLayoutGroup>(contentHolder, true, false, true, true);
		RectTransform component = gameObject.GetComponent<RectTransform>();
		component.anchorMin = new Vector2(0.3f, 0.3f);
		component.anchorMax = new Vector2(0.8f, 0.8f);
		component.SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, 400f);
		component.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, 524f);
		GameObject gameObject2 = UIHelper.CreateTitleBar(contentHolder, delegate
		{
			base.IsVisible = false;
		}, GetTitleBarText());
		titleBarText = gameObject2.GetComponentInChildren<Text>();
		buttonTooltips.Clear();
		(Toggle, Text) tuple = CreateLocalizedToggle(contentHolder, "More Exploit Panel", "panel_exploit_more_panel", delegate(bool v_ExploitPanelz)
		{
			MoreExploitPanel(v_ExploitPanelz);
		});
		toggle_ExploitPanelz = tuple.Item1;
		text_ExploitPanelz = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "God Mode", "panel_exploit_god_mode", delegate(bool v)
		{
			BattleMapMgrPatch.IsGodModActive = v;
			if (v)
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_god_mode_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_god_mode_disabled"));
			}
		});
		toggle_GodMode = tuple.Item1;
		text_GodMode = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "Fast/No Cooldown", "panel_exploit_fast_no_cooldown", delegate(bool v_cd)
		{
			BattleMapMgrPatch.IsNoCDActive = v_cd;
			if (v_cd)
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_fast_no_cooldown_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_fast_no_cooldown_disabled"));
			}
		});
		toggle_FastCD = tuple.Item1;
		text_FastCD = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "Infinite Vitality/Energy/Focus", "panel_exploit_infinite_vitality", delegate(bool v_inf)
		{
			BattleMapMgrPatch.IsInfPointsActive = v_inf;
			if (v_inf)
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_infinite_vitality_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_infinite_vitality_disabled"));
			}
		});
		toggle_InfVitality = tuple.Item1;
		text_InfVitality = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "1 Hit Kill", "panel_exploit_one_hit_kill", delegate(bool v_onehit)
		{
			BattleMapMgrPatch.IsOneHitActive = v_onehit;
			if (v_onehit)
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_one_hit_kill_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_one_hit_kill_disabled"));
			}
		});
		toggle_OneHit = tuple.Item1;
		text_OneHit = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "100% Escape", "panel_exploit_100_escape", delegate(bool v_escape)
		{
			SceneMapPatch_UnitActionRoleEscape.IsEscapeBitchActive = v_escape;
		});
		toggle_Escape = tuple.Item1;
		text_Escape = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "100% Drop Rate", "panel_exploit_100_drop_rate", delegate(bool v_dropRate)
		{
			ExploitPatch_DropRate.IsThisActive = v_dropRate;
			if (v_dropRate)
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_100_drop_rate_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_100_drop_rate_disabled"));
			}
		});
		toggle_DropRate = tuple.Item1;
		text_DropRate = tuple.Item2;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_relation)
		{
			SceneMapPatch_100Relation.IsThisActive = v_relation;
			SceneMapPatch_UnitActionRoleInvite.IsThisActive = v_relation;
			SceneMapPatch_UnitActionRoleRelation.IsThisActive = v_relation;
			if (v_relation)
			{
				if (Game.ConfMgr.dramaOptions != null)
				{
					List<ConfDramaOptionsItem>.Enumerator enumerator = Game.ConfMgr.dramaOptions._allConfList.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ConfDramaOptionsItem current = enumerator.Current;
						if (current != null && current.text == "drama_option810311")
						{
							ModMain.Log($"id: {current.id}");
							ModMain.Log("Initial - cost: " + current.cost);
							current.cost = "0";
							ModMain.Log("Updated - cost: " + current.cost);
							ModMain.Log($"costHide: {current.costHide}");
							ModMain.Log("function: " + current.function);
							ModMain.Log("nextDialogue: " + current.nextDialogue);
							ModMain.Log($"optionsHide: {current.optionsHide}");
							ModMain.Log("text: " + current.text);
							ModMain.Log("----- ----- ----- ----- -----");
						}
					}
				}
			}
			else if (Game.ConfMgr.dramaOptions != null)
			{
				List<ConfDramaOptionsItem>.Enumerator enumerator = Game.ConfMgr.dramaOptions._allConfList.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ConfDramaOptionsItem current2 = enumerator.Current;
					if (current2 != null && current2.text == "drama_option810311")
					{
						ModMain.Log($"id: {current2.id}");
						ModMain.Log("Initial - cost: " + current2.cost);
						current2.cost = "1_5";
						ModMain.Log("Updated - cost: " + current2.cost);
						ModMain.Log($"costHide: {current2.costHide}");
						ModMain.Log("function: " + current2.function);
						ModMain.Log("nextDialogue: " + current2.nextDialogue);
						ModMain.Log($"optionsHide: {current2.optionsHide}");
						ModMain.Log("text: " + current2.text);
						ModMain.Log("----- ----- ----- ----- -----");
					}
				}
			}
		}, parent: contentHolder, name: "100% Intim & No Hate/Stamina/Energy/Day Cost/CD", textKey: "panel_exploit_100_intim_no_cost");
		toggle_Relation = tuple.Item1;
		text_Relation = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "Steal Always Succeed", "panel_exploit_steal_always_succeed", delegate(bool v_steal)
		{
			SceneMapPatch_UnitActionRoleStealItem.IsStealActive = v_steal;
			SceneMapPatch_ConfRoleStealItem.IsStealActive = v_steal;
		});
		toggle_Steal = tuple.Item1;
		text_Steal = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "Marking NPC incurs No Cost", "panel_exploit_marking_no_cost", delegate(bool v_mark)
		{
			ExploitPatch_MarkNoCost.IsMarkNoCostActive = v_mark;
			if (v_mark)
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_marking_no_cost_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_marking_no_cost_disabled"));
			}
		});
		toggle_Mark = tuple.Item1;
		text_Mark = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "Traveling incurs No Day Cost", "panel_exploit_traveling_no_day_cost", delegate(bool v_nodaycostmove)
		{
			ExploitPatch_UnitActionMovePlayer.IsThisActive = v_nodaycostmove;
			if (v_nodaycostmove)
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_traveling_no_day_cost_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_traveling_no_day_cost_disabled"));
			}
		});
		toggle_NoDayCostMove = tuple.Item1;
		text_NoDayCostMove = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "Perfect Skill Comprehend & No Cost", "panel_exploit_perfect_skill_comprehend", delegate(bool v_perfectups)
		{
			ExploitPatch_UIMartialRealize.IsThisActive = v_perfectups;
			if (v_perfectups)
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_perfect_skill_comprehend_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_perfect_skill_comprehend_disabled"));
			}
		});
		toggle_PerfectUps = tuple.Item1;
		text_PerfectUps = tuple.Item2;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_Cultivation)
		{
			ExploitPatch_UnitActionGridGetExp.IsThisActive = v_Cultivation;
			ExploitPatch_UnitActionMartialTrain.IsThisActive = v_Cultivation;
			ExploitPatch_UnitActionSchoolTrainingHall.IsThisActive = v_Cultivation;
			if (v_Cultivation)
			{
				if (Game.ConfMgr.battleSkillTrain != null)
				{
					List<ConfBattleSkillTrainItem>.Enumerator enumerator = Game.ConfMgr.battleSkillTrain._allConfList.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ConfBattleSkillTrainItem current = enumerator.Current;
						if (current != null)
						{
							if (!orig_CultivateSkillcostNum.ContainsKey(current.id))
							{
								orig_CultivateSkillcostNum[current.id] = current.costNum;
							}
							current.costNum = 0;
						}
					}
				}
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_fast_cultivate_enabled"));
			}
			else
			{
				if (Game.ConfMgr.battleSkillTrain != null)
				{
					List<ConfBattleSkillTrainItem>.Enumerator enumerator = Game.ConfMgr.battleSkillTrain._allConfList.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ConfBattleSkillTrainItem current2 = enumerator.Current;
						if (current2 != null)
						{
							current2.costNum = orig_CultivateSkillcostNum[current2.id];
						}
					}
				}
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_fast_cultivate_disabled"));
			}
		}, parent: contentHolder, name: "Fast/Full Cultivate & No Day Cost", textKey: "panel_exploit_fast_cultivate_no_cost");
		toggle_Cultivation = tuple.Item1;
		text_Cultivation = tuple.Item2;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_Geomantic)
		{
			ExploitPatch_UnitActionGridGeomantic.IsThisActive = v_Geomantic;
			if (v_Geomantic)
			{
				if (Game.ConfMgr.worldBlockOperation != null)
				{
					List<ConfWorldBlockOperationItem>.Enumerator enumerator = Game.ConfMgr.worldBlockOperation._allConfList.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ConfWorldBlockOperationItem current = enumerator.Current;
						if (current != null)
						{
							current.cost = 0;
						}
					}
				}
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_more_geomancy_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_more_geomancy_disabled"));
			}
		}, parent: contentHolder, name: "More Geomancy Range & No Day Cost", textKey: "panel_exploit_more_geomancy_range");
		toggle_Geomantic = tuple.Item1;
		text_Geomantic = tuple.Item2;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_MineHerb)
		{
			if (v_MineHerb)
			{
				ConfWorldBlockHerb worldBlockHerb = Game.ConfMgr.worldBlockHerb;
				ConfWorldBlockMine worldBlockMine = Game.ConfMgr.worldBlockMine;
				ConfWorldBlockMineBook worldBlockMineBook = Game.ConfMgr.worldBlockMineBook;
				if (worldBlockHerb != null && worldBlockMine != null && worldBlockMineBook != null)
				{
					List<ConfWorldBlockHerbItem>.Enumerator enumerator = worldBlockHerb._allConfList.GetEnumerator();
					while (enumerator.MoveNext())
					{
						enumerator.Current.costDay = 0;
					}
					List<ConfWorldBlockMineItem>.Enumerator enumerator2 = worldBlockMine._allConfList.GetEnumerator();
					while (enumerator2.MoveNext())
					{
						enumerator2.Current.costDay = 0;
					}
					List<ConfWorldBlockMineBookItem>.Enumerator enumerator3 = worldBlockMineBook._allConfList.GetEnumerator();
					while (enumerator3.MoveNext())
					{
						enumerator3.Current.costDay = 0;
					}
					ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_harvest_mine_enabled"));
				}
				else
				{
					ModMain.LogTip(LocalizationHelper.T("panel_exploit_warning_worldblock_null"), "WARNING");
				}
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_harvest_mine_disabled"));
			}
		}, parent: contentHolder, name: "Harvest & Mine incurs No Day Cost", textKey: "panel_exploit_harvest_mine_no_cost");
		toggle_MineHerb = tuple.Item1;
		text_MineHerb = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "Fast/Full Learn Skill & No Cost/Failure", "panel_exploit_fast_learn_skill", delegate(bool v_EasyMartialLearn)
		{
			ExploitPatch_UnitActionPropMartialStudy.IsThisActive = v_EasyMartialLearn;
			ExploitPatch_UIMartialLearnGame_StartGame.IsThisActive = v_EasyMartialLearn;
			ExploitPatch_UIMartialLearnGame_AddCostMood.IsThisActive = v_EasyMartialLearn;
			if (v_EasyMartialLearn)
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_fast_learn_skill_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_fast_learn_skill_disabled"));
			}
		});
		toggle_EasyMartialLearn = tuple.Item1;
		text_EasyMartialLearn = tuple.Item2;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_BaguaJ)
		{
			string text = (g.data.world.animaWeapons.Contains(GameAnimaWeapon.PiscesPendant) ? "Bagua Jade" : (g.data.world.animaWeapons.Contains(GameAnimaWeapon.HootinEye) ? "Eye of Providence" : (g.data.world.animaWeapons.Contains(GameAnimaWeapon.DevilDemon) ? "Mythical Gourd" : "NULL")));
			if (text != "Bagua Jade")
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_warning_not_using_bagua_jade"), "WARNING", 3f);
				ModMain.LogTip(string.Format(LocalizationHelper.T("panel_exploit_warning_current_artifact_weapon"), text), "WARNING", 4f);
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_warning_ensure_bagua_jade"), "WARNING", 5f);
			}
			else if (v_BaguaJ)
			{
				if (Game.ConfMgr.piscesParam != null)
				{
					ModMain.Log("Player Transfer CD: " + Game.ConfMgr.piscesParam.playerTransCD);
					Game.ConfMgr.piscesParam._playerTransCD.value = "0";
					ModMain.Log("Modified - Player Transfer CD: " + Game.ConfMgr.piscesParam.playerTransCD);
					ModMain.Log("Summon NPC CD: " + Game.ConfMgr.piscesParam.npcSummonCD);
					Game.ConfMgr.piscesParam._npcSummonCD.value = "0";
					ModMain.Log("Modified - Summon NPC CD: " + Game.ConfMgr.piscesParam.npcSummonCD);
					ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_bagua_jade_enabled"));
				}
				else
				{
					ModMain.LogTip(LocalizationHelper.T("panel_exploit_warning_pisces_param_null"), "WARNING");
				}
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_bagua_jade_disabled"));
			}
		}, parent: contentHolder, name: "Bagua Jade incurs No Teleport/Summon CD", textKey: "panel_exploit_bagua_jade_no_cd");
		toggle_BaguaJ = tuple.Item1;
		text_BaguaJ = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "Mythical Gourd (Super Buff)", "panel_exploit_mythical_gourd_buff", delegate(bool v_MythicalGourdBuff)
		{
			ExploitPatch_ConfPotmonSkillLife_IsCanConver.IsThisActive = v_MythicalGourdBuff;
			MythicalGourdBuff(v_MythicalGourdBuff);
		});
		toggle_MythicalGourdBuff = tuple.Item1;
		text_MythicalGourdBuff = tuple.Item2;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_WardrobeNoCost)
		{
			if (v_WardrobeNoCost)
			{
				if (Game.ConfMgr.clothItem != null)
				{
					List<ConfClothItemItem>.Enumerator enumerator = Game.ConfMgr.clothItem._allConfList.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ConfClothItemItem current = enumerator.Current;
						if (current.itemCost != null)
						{
							for (int i = 0; i < current.itemCost.Length; i++)
							{
								Il2CppStructArray<int> il2CppStructArray = current.itemCost[i];
								int num = 0;
								foreach (int item in il2CppStructArray)
								{
									_ = item;
									if (num == 1)
									{
										il2CppStructArray[num] = 0;
									}
									num++;
								}
							}
						}
					}
					ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_wardrobe_no_cost_enabled"));
				}
				else
				{
					ModMain.LogTip(LocalizationHelper.T("panel_exploit_warning_cloth_item_null"), "WARNING");
				}
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_wardrobe_no_cost_disabled"));
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_warning_restart_game_reset"));
			}
		}, parent: contentHolder, name: "Wardrobe Shop incurs No Cost", textKey: "panel_exploit_wardrobe_no_cost");
		toggle_WardrobeNoCost = tuple.Item1;
		text_WardrobeNoCost = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "Show Charisma Value (Shown at Player/NPC UI)", "panel_exploit_show_charisma_value", delegate(bool v_ExactCharisma)
		{
			ExploitPatch_UICreatePlayerFacade.IsThisActive = v_ExactCharisma;
			ExploitPatch_UICreatePlayerProperty.IsThisActive = v_ExactCharisma;
			ExploitPatch_UINPCInfo.IsThisActive = v_ExactCharisma;
			ExploitPatch_UIPlayerInfoProperty.IsThisActive = v_ExactCharisma;
			if (v_ExactCharisma)
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_show_charisma_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_show_charisma_disabled"));
			}
		});
		toggle_ExactCharisma = tuple.Item1;
		text_ExactCharisma = tuple.Item2;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_NPCRealm)
		{
			IsRealmActive = v_NPCRealm;
			if (v_NPCRealm)
			{
				g.events.On(EGameType.OpenUIEnd, callRealmUIEnd, 0);
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_realm_display_activated"));
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_show_realm_button_visible"), null, 3f);
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_close_reopen_npc_ui"), null, 4f);
			}
			else
			{
				g.events.Off(EGameType.OpenUIEnd, callRealmUIEnd);
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_realm_display_deactivated"));
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_show_realm_button_hidden"), null, 3f);
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_close_reopen_npc_ui"), null, 4f);
			}
		}, parent: contentHolder, name: "Show NPC's Rewrite-Destiny UI (Display at NPC UI)", textKey: "panel_exploit_show_npc_realm_ui");
		toggle_NPCRealm = tuple.Item1;
		text_NPCRealm = tuple.Item2;
		callRealmUIEnd = OnRealmUIEnd;
		buttonTooltips[text_MythicalGourdBuff.gameObject.GetComponent<RectTransform>()] = "tooltip_exploit_mythical_gourd_buff";
		buttonTooltips[text_NPCRealm.gameObject.GetComponent<RectTransform>()] = "tooltip_exploit_npc_realm_warning";
		tooltip.Create();
		return (panelRoot: gameObject, draggableArea: gameObject2);
	}

	internal void MoreExploitPanel(bool isActive)
	{
		Panel panel = UIManager.Panels[PanelType.ExploitMore];
		panel.IsVisible = isActive && !panel.IsVisible;
	}

	internal void MythicalGourdBuff(bool IsThisActive)
	{
		string text = (g.data.world.animaWeapons.Contains(GameAnimaWeapon.PiscesPendant) ? "Bagua Jade" : (g.data.world.animaWeapons.Contains(GameAnimaWeapon.HootinEye) ? "Eye of Providence" : (g.data.world.animaWeapons.Contains(GameAnimaWeapon.DevilDemon) ? "Mythical Gourd" : "NULL")));
		if (text != "Mythical Gourd")
		{
			ModMain.LogTip(LocalizationHelper.T("panel_exploit_warning_not_using_mythical_gourd"), "WARNING", 3f);
			ModMain.LogTip(string.Format(LocalizationHelper.T("panel_exploit_warning_current_artifact_weapon"), text), "WARNING", 4f);
			ModMain.LogTip(LocalizationHelper.T("panel_exploit_warning_ensure_mythical_gourd"), "WARNING", 5f);
			return;
		}
		ConfDevilDemonAbsorb devilDemonAbsorb = Game.ConfMgr.devilDemonAbsorb;
		ConfDevilDemonBase devilDemonBase = Game.ConfMgr.devilDemonBase;
		ConfDevilDemonTeam devilDemonTeam = Game.ConfMgr.devilDemonTeam;
		ConfDevilDemonWork devilDemonWork = Game.ConfMgr.devilDemonWork;
		ConfPotmonBattle potmonBattle = Game.ConfMgr.potmonBattle;
		ConfPotmonParamer potmonParamer = Game.ConfMgr.potmonParamer;
		ConfPotmonSkillStudy potmonSkillStudy = Game.ConfMgr.potmonSkillStudy;
		ConfPotmonBase potmonBase = Game.ConfMgr.potmonBase;
		ConfPotmonBattleExp potmonBattleExp = Game.ConfMgr.potmonBattleExp;
		if (IsThisActive)
		{
			if (devilDemonAbsorb != null)
			{
				List<ConfDevilDemonAbsorbItem>.Enumerator enumerator = devilDemonAbsorb._allConfList.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ConfDevilDemonAbsorbItem current = enumerator.Current;
					if (current != null)
					{
						ModMain.Log($"id: {current.id}");
						ModMain.Log($"Initial addRate: {current.addRate}");
						ModMain.Log($"Initial hpPervent: {current.hpPervent}");
						ModMain.Log($"Initial rate: {current.rate}");
						current.addRate = 200;
						ModMain.Log($"Updated addRate: {current.addRate}");
						current.hpPervent = 100;
						ModMain.Log($"Updated hpPervent: {current.hpPervent}");
						current.rate = 100;
						ModMain.Log($"Updated rate: {current.rate}");
					}
				}
			}
			if (devilDemonBase != null)
			{
				List<ConfDevilDemonBaseItem>.Enumerator enumerator2 = devilDemonBase._allConfList.GetEnumerator();
				while (enumerator2.MoveNext())
				{
					ConfDevilDemonBaseItem current2 = enumerator2.Current;
					if (current2 != null)
					{
						ModMain.Log($"id: {current2.id}");
						ModMain.Log($"Initial collectBossCount: {current2.collectBossCount}");
						ModMain.Log($"Initial devilDemonCount: {current2.devilDemonCount}");
						current2.collectBossCount = 999;
						ModMain.Log($"Updated collectBossCount: {current2.collectBossCount}");
						current2.devilDemonCount = 999;
						ModMain.Log($"Updated devilDemonCount: {current2.devilDemonCount}");
					}
				}
			}
			if (devilDemonTeam != null)
			{
				List<ConfDevilDemonTeamItem>.Enumerator enumerator3 = devilDemonTeam._allConfList.GetEnumerator();
				while (enumerator3.MoveNext())
				{
					ConfDevilDemonTeamItem current3 = enumerator3.Current;
					if (current3 != null)
					{
						ModMain.Log($"id: {current3.id}");
						ModMain.Log($"Initial potmonMaxCount: {current3.potmonMaxCount}");
						current3.potmonMaxCount = 999;
						ModMain.Log($"Updated potmonMaxCount: {current3.potmonMaxCount}");
					}
				}
			}
			if (devilDemonWork != null)
			{
				List<ConfDevilDemonWorkItem>.Enumerator enumerator4 = devilDemonWork._allConfList.GetEnumerator();
				while (enumerator4.MoveNext())
				{
					ConfDevilDemonWorkItem current4 = enumerator4.Current;
					if (current4 != null)
					{
						ModMain.Log($"id: {current4.id}");
						ModMain.Log("Initial workMonth: " + current4.workMonth);
						current4.workMonth = "1_1";
						ModMain.Log("Updated workMonth: " + current4.workMonth);
					}
				}
			}
			if (potmonBattle != null)
			{
				List<ConfPotmonBattleItem>.Enumerator enumerator5 = potmonBattle._allConfList.GetEnumerator();
				while (enumerator5.MoveNext())
				{
					ConfPotmonBattleItem current5 = enumerator5.Current;
					if (current5 != null)
					{
						ModMain.Log($"id: {current5.id}");
						ModMain.Log($"Initial stayTime: {current5.stayTime}");
						ModMain.Log($"Initial cd: {current5.cd}");
						ModMain.Log($"Initial spCost: {current5.spCost}");
						current5.stayTime = 30;
						ModMain.Log($"Updated stayTime: {current5.stayTime}");
						current5.cd = 30;
						ModMain.Log($"Updated cd: {current5.cd}");
						current5.spCost = 0;
						ModMain.Log($"Updated spCost: {current5.spCost}");
					}
				}
			}
			if (potmonParamer != null)
			{
				List<ConfPotmonParamerItem>.Enumerator enumerator6 = potmonParamer._allConfList.GetEnumerator();
				while (enumerator6.MoveNext())
				{
					ConfPotmonParamerItem current6 = enumerator6.Current;
					if (current6 != null)
					{
						if (current6.key == "potmonContract")
						{
							ModMain.Log($"id: {current6.id}");
							ModMain.Log("Initial value: " + current6.value);
							current6.value = "999";
							ModMain.Log("Updated value: " + current6.value);
						}
						if (current6.key == "potmonPropAddExp")
						{
							ModMain.Log($"id: {current6.id}");
							ModMain.Log("Initial value: " + current6.value);
							current6.value = "696969";
							ModMain.Log("Updated value: " + current6.value);
						}
					}
				}
			}
			if (potmonSkillStudy != null)
			{
				List<ConfPotmonSkillStudyItem>.Enumerator enumerator7 = potmonSkillStudy._allConfList.GetEnumerator();
				while (enumerator7.MoveNext())
				{
					ConfPotmonSkillStudyItem current7 = enumerator7.Current;
					if (current7 != null)
					{
						ModMain.Log($"id: {current7.id}");
						ModMain.Log($"Initial studyRate: {current7.studyRate}");
						current7.studyRate = 100;
						ModMain.Log($"Updated studyRate: {current7.studyRate}");
					}
				}
			}
			if (potmonBase != null)
			{
				List<ConfPotmonBaseItem>.Enumerator enumerator8 = potmonBase._allConfList.GetEnumerator();
				while (enumerator8.MoveNext())
				{
					ConfPotmonBaseItem current8 = enumerator8.Current;
					if (current8 != null)
					{
						ModMain.Log($"id: {current8.id}");
						ModMain.Log("Initial sex: " + current8.sex);
						ModMain.Log($"Initial adventureSkillPercent: {current8.adventureSkillPercent}");
						ModMain.Log($"Initial adventureSkillNum: {current8.adventureSkillNum}");
						current8.sex = "2";
						ModMain.Log("Updated sex: " + current8.sex);
						current8.adventureSkillPercent = 10000;
						ModMain.Log($"Updated adventureSkillPercent: {current8.adventureSkillPercent}");
						current8.adventureSkillNum = 5;
						ModMain.Log($"Updated adventureSkillNum: {current8.adventureSkillNum}");
					}
				}
			}
			if (potmonBattleExp != null)
			{
				List<ConfPotmonBattleExpItem>.Enumerator enumerator9 = potmonBattleExp._allConfList.GetEnumerator();
				while (enumerator9.MoveNext())
				{
					ConfPotmonBattleExpItem current9 = enumerator9.Current;
					if (current9 != null)
					{
						ModMain.Log($"id: {current9.id}");
						ModMain.Log($"Initial winExp: {current9.winExp}");
						current9.winExp = 696969;
						ModMain.Log($"Updated winExp: {current9.winExp}");
					}
				}
			}
			ModMain.LogTip(LocalizationHelper.T("panel_exploit_mythical_gourd_buff_enabled"));
		}
		else
		{
			ModMain.LogTip(LocalizationHelper.T("panel_exploit_mythical_gourd_buff_disabled"));
			ModMain.LogTip(LocalizationHelper.T("panel_exploit_restart_game_reset_values"));
		}
	}

	internal void OnRealmUIEnd(ETypeData e)
	{
		OpenUIEnd openUIEnd = e.Cast<OpenUIEnd>();
		if (openUIEnd.uiType.uiName == UIType.NPCInfo.uiName)
		{
			UINPCInfo ui = g.ui.GetUI<UINPCInfo>(UIType.NPCInfo);
			if (ui != null)
			{
				if (RealmGO != null)
				{
					UnityEngine.Object.Destroy(RealmGO);
					ModMain.Log("Destroyed previous RealmGO.");
				}
				GameObject gameObject = UnityEngine.Object.Instantiate(ui.uiUnitInfo.goButton1.gameObject);
				Resolution currentResolution = Screen.currentResolution;
				float num = currentResolution.width;
				float num2 = currentResolution.height;
				float num3 = -200f / num * (float)Screen.width;
				float num4 = -500f / num2 * (float)Screen.height;
				Vector3 localPosition = new Vector3(ui.uiUnitInfo.goAppellationLuck.transform.localPosition.x + num3, ui.uiUnitInfo.goAppellationLuck.transform.localPosition.y + num4);
				gameObject.transform.SetParent(ui.uiUnitInfo.goAppellationLuck.transform.parent, worldPositionStays: false);
				gameObject.transform.localPosition = localPosition;
				gameObject.name = "look";
				gameObject.GetComponentInChildren<Text>().text = LocalizationHelper.T("panel_exploit_show_realm_button_text");
				Button componentInChildren = gameObject.GetComponentInChildren<Button>();
				componentInChildren.onClick.RemoveAllListeners();
				componentInChildren.onClick.AddListener((Action)delegate
				{
					if (IsRealmActive)
					{
						HandleRealmButtonClick(ui, gameObject);
					}
					else
					{
						ModMain.LogTip(LocalizationHelper.T("panel_exploit_show_realm_disabled_warning"), "WARNING");
					}
				});
				RealmGO = gameObject;
				gameObject.SetActive(IsRealmActive);
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_ui_npc_info_null_warning"), "WARNING");
			}
		}
		else
		{
			if (!(openUIEnd.uiType.uiName == UIType.ElderSkillLearn.uiName) || !bulbul)
			{
				return;
			}
			UIElderSkillLearn uiUp = g.ui.GetUI<UIElderSkillLearn>(UIType.ElderSkillLearn);
			if (uiUp != null)
			{
				uiUp.goCostItemPosi.gameObject.SetActive(value: false);
				uiUp.goCostItemRoot.gameObject.SetActive(value: false);
				Button componentInChildren2 = uiUp.btnUpGrade.gameObject.GetComponentInChildren<Button>();
				componentInChildren2.onClick.RemoveAllListeners();
				componentInChildren2.onClick.AddListener((Action)delegate
				{
					g.world.playerUnit.data.unitData.elderData.AddExp(1000000);
					uiUp.UpdateUI();
					uiUp.goCostItemPosi.gameObject.SetActive(value: false);
					uiUp.goCostItemRoot.gameObject.SetActive(value: false);
				});
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_ui_elder_skill_learn_null_warning"), "WARNING");
			}
		}
	}

	private void HandleRealmButtonClick(UINPCInfo ui, GameObject gameObject)
	{
		WorldUnitBase unitNPC = ui.unit;
		WorldUnitData tempData = g.world.playerUnit.data;
		Dictionary<int, DataWorld.World.PlayerLogData.GradeData> tempUp = g.data.world.playerLog.upGrade;
		int tempDay = unitNPC.data.unitData.residueDay;
		g.data.world.playerLog.upGrade = unitNPC.data.unitData.npcUpGrade;
		unitNPC.data.unitData.residueDay = g.world.playerUnit.data.unitData.residueDay;
		g.world.playerUnit.data = unitNPC.data;
		g.ui.OpenUI<UIFateFeature>(UIType.FateFeature);
		bulbul = true;
		Action action = delegate
		{
			g.world.playerUnit.data = tempData;
			g.data.world.playerLog.upGrade = tempUp;
			unitNPC.data.unitData.residueDay = tempDay;
			bulbul = false;
		};
		g.events.On(EGameType.OneCloseUIEnd(UIType.FateFeature), action, 1);
	}

	private string GetTitleBarText()
	{
		string text = LocalizationHelper.T("common_cheatpanel");
		return "<b>" + text + "</b> - " + LocalizationHelper.T("panel_exploit_title");
	}

	private void UpdateUITexts()
	{
		if (titleBarText != null)
		{
			titleBarText.text = GetTitleBarText();
		}
		if (text_ExploitPanelz != null)
		{
			text_ExploitPanelz.text = LocalizationHelper.T("panel_exploit_more_panel");
		}
		if (text_GodMode != null)
		{
			text_GodMode.text = LocalizationHelper.T("panel_exploit_god_mode");
		}
		if (text_FastCD != null)
		{
			text_FastCD.text = LocalizationHelper.T("panel_exploit_fast_no_cooldown");
		}
		if (text_InfVitality != null)
		{
			text_InfVitality.text = LocalizationHelper.T("panel_exploit_infinite_vitality");
		}
		if (text_OneHit != null)
		{
			text_OneHit.text = LocalizationHelper.T("panel_exploit_one_hit_kill");
		}
		if (text_Escape != null)
		{
			text_Escape.text = LocalizationHelper.T("panel_exploit_100_escape");
		}
		if (text_DropRate != null)
		{
			text_DropRate.text = LocalizationHelper.T("panel_exploit_100_drop_rate");
		}
		if (text_Relation != null)
		{
			text_Relation.text = LocalizationHelper.T("panel_exploit_100_intim_no_cost");
		}
		if (text_Steal != null)
		{
			text_Steal.text = LocalizationHelper.T("panel_exploit_steal_always_succeed");
		}
		if (text_Mark != null)
		{
			text_Mark.text = LocalizationHelper.T("panel_exploit_marking_no_cost");
		}
		if (text_NoDayCostMove != null)
		{
			text_NoDayCostMove.text = LocalizationHelper.T("panel_exploit_traveling_no_day_cost");
		}
		if (text_PerfectUps != null)
		{
			text_PerfectUps.text = LocalizationHelper.T("panel_exploit_perfect_skill_comprehend");
		}
		if (text_Cultivation != null)
		{
			text_Cultivation.text = LocalizationHelper.T("panel_exploit_fast_cultivate_no_cost");
		}
		if (text_Geomantic != null)
		{
			text_Geomantic.text = LocalizationHelper.T("panel_exploit_more_geomancy_range");
		}
		if (text_MineHerb != null)
		{
			text_MineHerb.text = LocalizationHelper.T("panel_exploit_harvest_mine_no_cost");
		}
		if (text_EasyMartialLearn != null)
		{
			text_EasyMartialLearn.text = LocalizationHelper.T("panel_exploit_fast_learn_skill");
		}
		if (text_BaguaJ != null)
		{
			text_BaguaJ.text = LocalizationHelper.T("panel_exploit_bagua_jade_no_cd");
		}
		if (text_MythicalGourdBuff != null)
		{
			text_MythicalGourdBuff.text = LocalizationHelper.T("panel_exploit_mythical_gourd_buff");
		}
		if (text_WardrobeNoCost != null)
		{
			text_WardrobeNoCost.text = LocalizationHelper.T("panel_exploit_wardrobe_no_cost");
		}
		if (text_ExactCharisma != null)
		{
			text_ExactCharisma.text = LocalizationHelper.T("panel_exploit_show_charisma_value");
		}
		if (text_NPCRealm != null)
		{
			text_NPCRealm.text = LocalizationHelper.T("panel_exploit_show_npc_realm_ui");
		}
		if (RealmGO != null && RealmGO.activeSelf)
		{
			Text componentInChildren = RealmGO.GetComponentInChildren<Text>();
			if (componentInChildren != null)
			{
				componentInChildren.text = LocalizationHelper.T("panel_exploit_show_realm_button_text");
			}
		}
	}
}
