using System;
using System.Text.RegularExpressions;
using EGameTypeData;
using Il2CppSystem.Collections.Generic;
using MOD_Mivopx;
using MOD_Mivopx.UI.Panels;
using TaleOfImmortalCheat.Localization;
using UnhollowerBaseLib;
using UnityEngine;
using UnityEngine.UI;
using UniverseLib.Input;
using UniverseLib.UI;

namespace TaleOfImmortalCheat.UI.Panels;

internal class ExploitPanelMore : Panel
{
	private const string PanelName = "ExploitMore";

	private TooltipPanel tooltip = new TooltipPanel("ButtonTooltip");

	private Dictionary<RectTransform, string> buttonTooltips = new Dictionary<RectTransform, string>();

	private Action<ETypeData> callCombatPowerUI;

	private Action<ETypeData> callBattleReportUI;

	private Action<ETypeData> callMultiItemUI;

	private Action<ETypeData> callReducedWorshipUI;

	private Action<ETypeData> callNoCostDungeonUI;

	private Action<ETypeData> callNoCDDungeonUI;

	private bool IsCombatPowerActive;

	private GameObject CombatPowerGO;

	private bool IsBattleReportActive;

	private GameObject BattleReportGO;

	private bool IsMultiItemActive;

	private GameObject MultiItemGO;

	private bool IsReducedWorshipActive;

	private bool IsNoCostDungeonActive;

	private bool IsNoCDDungeonActive;

	private Dictionary<int, string> originalDungeonCosts = new Dictionary<int, string>();

	private Text titleBarText;

	private Toggle toggle_CombatPower;

	private Text text_CombatPower;

	private Toggle toggle_BattleReport;

	private Text text_BattleReport;

	private Toggle toggle_MultiItem;

	private Text text_MultiItem;

	private Toggle toggle_Hospital;

	private Text text_Hospital;

	private Toggle toggle_CheapArtRepair;

	private Text text_CheapArtRepair;

	private Toggle toggle_EasyArtiForge;

	private Text text_EasyArtiForge;

	private Toggle toggle_ArtiSpiritBuff;

	private Text text_ArtiSpiritBuff;

	private Toggle toggle_ArtiSpiritFreeUp;

	private Text text_ArtiSpiritFreeUp;

	private Toggle toggle_ReducedWorship;

	private Text text_ReducedWorship;

	private Toggle toggle_NoCostDungeon;

	private Text text_NoCostDungeon;

	private Toggle toggle_NoCDDungeon;

	private Text text_NoCDDungeon;

	private Toggle toggle_ShortcutKey;

	private Text text_ShortcutKey;

	private Toggle toggle_DisableDebug;

	private Text text_DisableDebug;

	public static ExploitPanelMore Instance { get; private set; }

	public ExploitPanelMore()
		: base(isStartedVisible: false)
	{
		Instance = this;
		UIRefreshManager.OnLanguageChanged += UpdateUITexts;
	}

	~ExploitPanelMore()
	{
		UIRefreshManager.OnLanguageChanged -= UpdateUITexts;
	}

	private (Toggle toggle, Text text) CreateLocalizedToggle(GameObject parent, string name, string textKey, Action<bool> onValueChanged, string tooltipKey = null)
	{
		UIFactory.CreateToggle(parent, name, out var toggle, out var text);
		toggle.isOn = false;
		text.text = LocalizationHelper.T(textKey);
		toggle.onValueChanged.AddListener(onValueChanged);
		if (!string.IsNullOrEmpty(tooltipKey))
		{
			buttonTooltips[text.gameObject.GetComponent<RectTransform>()] = tooltipKey;
		}
		return (toggle: toggle, text: text);
	}

	public override bool Update(bool allowDragging)
	{
		bool result = base.Update(allowDragging);
		if (base.PanelRoot == null || !base.IsVisible)
		{
			return result;
		}
		Vector3 mousePosition = InputManager.MousePosition;
		tooltip.IsVisible = false;
		Dictionary<RectTransform, string>.Enumerator enumerator = buttonTooltips.GetEnumerator();
		while (enumerator.MoveNext())
		{
			KeyValuePair<RectTransform, string> current = enumerator.Current;
			if (current.Key != null && !string.IsNullOrEmpty(current.Value))
			{
				Vector3 point = current.Key.InverseTransformPoint(mousePosition);
				if (current.Key.rect.Contains(point))
				{
					string label = (current.Value.StartsWith("tooltip_") ? LocalizationHelper.T(current.Value) : current.Value);
					tooltip.TooltipFor(current.Key, label);
					tooltip.IsVisible = true;
					break;
				}
			}
		}
		return result;
	}

	internal override (GameObject panelRoot, GameObject draggableArea) CreateUI(GameObject uiRoot)
	{
		Debug.Log("Cheat UI - More Exploit panel");
		GameObject contentHolder;
		GameObject gameObject = UIFactory.CreatePanel("Exploit 2", uiRoot, out contentHolder);
		UIFactory.SetLayoutGroup<VerticalLayoutGroup>(contentHolder, true, false, true, true);
		RectTransform component = gameObject.GetComponent<RectTransform>();
		component.anchorMin = new Vector2(0.3f, 0.3f);
		component.anchorMax = new Vector2(0.8f, 0.8f);
		component.SetSizeWithCurrentAnchors(RectTransform.Axis.Horizontal, 400f);
		component.SetSizeWithCurrentAnchors(RectTransform.Axis.Vertical, 339f);
		GameObject gameObject2 = UIHelper.CreateTitleBar(contentHolder, delegate
		{
			base.IsVisible = false;
		}, GetTitleBarText());
		titleBarText = gameObject2.GetComponentInChildren<Text>();
		buttonTooltips.Clear();
		(Toggle, Text) tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_CombatPower)
		{
			IsCombatPowerActive = v_CombatPower;
			if (v_CombatPower)
			{
				g.events.On(EGameType.OpenUIEnd, callCombatPowerUI, 0);
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_combat_power_activated"));
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_combat_power_text_visible"), null, 3f);
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_close_reopen_npc_ui"), null, 4f);
			}
			else
			{
				g.events.Off(EGameType.OpenUIEnd, callCombatPowerUI);
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_combat_power_deactivated"));
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_combat_power_text_hidden"), null, 3f);
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_status_close_reopen_npc_ui"), null, 4f);
			}
		}, parent: contentHolder, name: "Compare NPC/Player Combat Power (Display at NPC UI)", textKey: "panel_exploitmore_compare_combat_power");
		toggle_CombatPower = tuple.Item1;
		text_CombatPower = tuple.Item2;
		callCombatPowerUI = OnCombatPowerUI;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_BattleReport)
		{
			IsBattleReportActive = v_BattleReport;
			if (v_BattleReport)
			{
				g.events.On(EGameType.OpenUIEnd, callBattleReportUI, 0);
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_battle_report_activated"));
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_battle_report_text_visible"), null, 3f);
			}
			else
			{
				g.events.Off(EGameType.OpenUIEnd, callBattleReportUI);
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_battle_report_deactivated"));
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_battle_report_text_hidden"), null, 3f);
			}
		}, parent: contentHolder, name: "Show Battle Report (Pre-Battle Stats)", textKey: "panel_exploitmore_show_battle_report");
		toggle_BattleReport = tuple.Item1;
		text_BattleReport = tuple.Item2;
		callBattleReportUI = OnBattleReportUI;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_MultiItem)
		{
			IsMultiItemActive = v_MultiItem;
			if (v_MultiItem)
			{
				g.events.On(EGameType.OpenUIEnd, callMultiItemUI, 0);
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_increase_item_activated"));
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_increase_text_visible"), null, 3f);
			}
			else
			{
				g.events.Off(EGameType.OpenUIEnd, callMultiItemUI);
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_increase_item_deactivated"));
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_increase_text_hidden"), null, 3f);
			}
		}, parent: contentHolder, name: "Show 'Increase' Button for Selected Item", textKey: "panel_exploitmore_show_increase_button");
		toggle_MultiItem = tuple.Item1;
		text_MultiItem = tuple.Item2;
		callMultiItemUI = OnMultiItemUI;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_Hospital)
		{
			if (v_Hospital)
			{
				if (Game.ConfMgr.buildingHospital != null)
				{
					List<ConfBuildingHospitalItem>.Enumerator enumerator = Game.ConfMgr.buildingHospital._allConfList.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ConfBuildingHospitalItem current = enumerator.Current;
						if (current != null)
						{
							current.removeRate = 1000;
							current.costDay = 0;
						}
					}
					if (Game.ConfMgr.localText != null)
					{
						Dictionary<string, ConfLocalTextItem>.Enumerator enumerator2 = Game.ConfMgr.localText.allText.GetEnumerator();
						while (enumerator2.MoveNext())
						{
							KeyValuePair<string, ConfLocalTextItem> current2 = enumerator2.Current;
							if (current2.key == "school_liaoshangtishi")
							{
								current2.value.en = LocalizationHelper.T("game_text_recuperating_removes_destiny");
							}
							if (current2.key == "school_liaoshang1")
							{
								current2.value.en = LocalizationHelper.T("game_text_recuperate_0_days");
							}
						}
					}
				}
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_rest_100_enabled"));
			}
			else
			{
				if (Game.ConfMgr.buildingHospital != null)
				{
					List<ConfBuildingHospitalItem>.Enumerator enumerator = Game.ConfMgr.buildingHospital._allConfList.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ConfBuildingHospitalItem current3 = enumerator.Current;
						if (current3 != null)
						{
							current3.removeRate = 100;
							current3.costDay = 5;
						}
					}
					if (Game.ConfMgr.localText != null)
					{
						Dictionary<string, ConfLocalTextItem>.Enumerator enumerator2 = Game.ConfMgr.localText.allText.GetEnumerator();
						while (enumerator2.MoveNext())
						{
							KeyValuePair<string, ConfLocalTextItem> current4 = enumerator2.Current;
							if (current4.key == "school_liaoshangtishi")
							{
								current4.value.en = LocalizationHelper.T("game_text_recuperation_chance_5_days");
							}
							if (current4.key == "school_liaoshang1")
							{
								current4.value.en = LocalizationHelper.T("game_text_recuperate_5_days");
							}
						}
					}
				}
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_rest_100_disabled"));
			}
		}, parent: contentHolder, name: "Rest 100% Removes Negative Destiny & No Day Cost", textKey: "panel_exploitmore_rest_100_removes_destiny");
		toggle_Hospital = tuple.Item1;
		text_Hospital = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "Remarkably Low-Cost Artifacts Repair", "panel_exploitmore_low_cost_artifacts_repair", delegate(bool v_CheapArtRepair)
		{
			ExploitPatch_UIArtifactShapeRepair.IsThisActive = v_CheapArtRepair;
			if (v_CheapArtRepair)
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_low_cost_repair_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_low_cost_repair_disabled"));
			}
		});
		toggle_CheapArtRepair = tuple.Item1;
		text_CheapArtRepair = tuple.Item2;
		tuple = CreateLocalizedToggle(contentHolder, "Effortless Artifact Forge", "panel_exploitmore_effortless_artifact_forge", delegate(bool v_EasyArtiForge)
		{
			ExploitPatch_StartRefine.IsThisActive = v_EasyArtiForge;
			ExploitPatch_EndRefine.IsThisActive = v_EasyArtiForge;
			if (v_EasyArtiForge)
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_effortless_forge_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_effortless_forge_disabled"));
			}
		});
		toggle_EasyArtiForge = tuple.Item1;
		text_EasyArtiForge = tuple.Item2;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_ArtiSpiritBuff)
		{
			ConfArtifactShape ArtifactShape;
			ConfArtifactShapeCommon ArtifactShapeCommon;
			ConfArtifactSprite ArtifactSprite;
			ConfArtifactSpriteArt ArtifactSpriteArt;
			ConfArtifactSpriteClose ArtifactSpriteClose;
			ConfArtifactSpriteLevel ArtifactSpriteLevel;
			ConfRoleCreateFeature RoleCreateFeature;
			ConfRoleEffect RoleEffect;
			if (v_ArtiSpiritBuff)
			{
				ArtifactShape = Game.ConfMgr.artifactShape;
				ArtifactShapeCommon = Game.ConfMgr.artifactShapeCommon;
				ArtifactSprite = Game.ConfMgr.artifactSprite;
				ArtifactSpriteArt = Game.ConfMgr.artifactSpriteArt;
				ArtifactSpriteClose = Game.ConfMgr.artifactSpriteClose;
				ArtifactSpriteLevel = Game.ConfMgr.artifactSpriteLevel;
				RoleCreateFeature = Game.ConfMgr.roleCreateFeature;
				RoleEffect = Game.ConfMgr.roleEffect;
				if (IsAnyNull())
				{
					ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_warning_something_null"), "WARNING", 5f);
				}
				else
				{
					if (ArtifactShape != null)
					{
						ModMain.Log("ArtifactShape");
						List<ConfArtifactShapeItem>.Enumerator enumerator = ArtifactShape._allConfList.GetEnumerator();
						while (enumerator.MoveNext())
						{
							ConfArtifactShapeItem current = enumerator.Current;
							if (current != null)
							{
								ModMain.Log($"Initial - soulCapcity: {current.soulCapcity}");
								current.soulCapcity = 6969;
								ModMain.Log($"Updated - soulCapcity: {current.soulCapcity}");
								ModMain.Log($"Initial - durable: {current.durable}");
								current.durable = 6969;
								ModMain.Log($"Updated - durable: {current.durable}");
							}
						}
						ModMain.Log("----- ----- ----- ----- -----");
					}
					if (ArtifactShapeCommon != null)
					{
						ModMain.Log("ArtifactShapeCommon");
						List<ConfArtifactShapeCommonItem>.Enumerator enumerator2 = ArtifactShapeCommon._allConfList.GetEnumerator();
						while (enumerator2.MoveNext())
						{
							ConfArtifactShapeCommonItem current2 = enumerator2.Current;
							if (current2 != null)
							{
								ModMain.Log($"Initial - soulCapcity: {current2.soulCapcity}");
								current2.soulCapcity = 6969;
								ModMain.Log($"Updated - soulCapcity: {current2.soulCapcity}");
							}
						}
						ModMain.Log("----- ----- ----- ----- -----");
					}
					if (ArtifactSprite != null)
					{
						ModMain.Log("ArtifactSprite");
						List<ConfArtifactSpriteItem>.Enumerator enumerator3 = ArtifactSprite._allConfList.GetEnumerator();
						while (enumerator3.MoveNext())
						{
							ConfArtifactSpriteItem current3 = enumerator3.Current;
							if (current3 != null)
							{
								ModMain.Log($"Initial - staminaRestore: {current3.staminaRestore}");
								current3.staminaRestore = 100;
								ModMain.Log($"Updated - staminaRestore: {current3.staminaRestore}");
								if (current3.lifeRequire > 0)
								{
									ModMain.Log($"Initial - lifeRequire: {current3.lifeRequire}");
									current3.lifeRequire = 0;
									ModMain.Log($"Updated - lifeRequire: {current3.lifeRequire}");
								}
							}
						}
						ModMain.Log("----- ----- ----- ----- -----");
					}
					if (ArtifactSpriteArt != null)
					{
						ModMain.Log("ArtifactSpriteArt");
						List<ConfArtifactSpriteArtItem>.Enumerator enumerator4 = ArtifactSpriteArt._allConfList.GetEnumerator();
						while (enumerator4.MoveNext())
						{
							ConfArtifactSpriteArtItem current4 = enumerator4.Current;
							if (current4 != null && current4.costStamina > 1)
							{
								ModMain.Log($"Initial - costStamina: {current4.costStamina}");
								current4.costStamina = 0;
								ModMain.Log($"Updated - costStamina: {current4.costStamina}");
							}
						}
						ModMain.Log("----- ----- ----- ----- -----");
					}
					if (ArtifactSpriteClose != null)
					{
						ModMain.Log("ArtifactSpriteClose");
						ModMain.Log($"Initial - giftInterval: {ArtifactSpriteClose.giftInterval}");
						ArtifactSpriteClose._giftInterval.value = 1;
						ModMain.Log($"Updated - giftInterval: {ArtifactSpriteClose.giftInterval}");
						ModMain.Log("----- ----- ----- ----- -----");
					}
					if (ArtifactSpriteLevel != null)
					{
						ModMain.Log("ArtifactSpriteLevel");
						List<ConfArtifactSpriteLevelItem>.Enumerator enumerator5 = ArtifactSpriteLevel._allConfList.GetEnumerator();
						while (enumerator5.MoveNext())
						{
							ConfArtifactSpriteLevelItem current5 = enumerator5.Current;
							if (current5 != null)
							{
								ModMain.Log($"level: {current5.level}");
								ModMain.Log($"Initial - exp: {current5.exp}");
								switch (current5.level)
								{
								case 1:
									current5.exp = 0;
									break;
								case 2:
									current5.exp = 20;
									break;
								case 3:
									current5.exp = 40;
									break;
								case 4:
									current5.exp = 60;
									break;
								case 5:
									current5.exp = 80;
									break;
								}
								ModMain.Log($"Updated - exp: {current5.exp}");
							}
						}
						ModMain.Log("----- ----- ----- ----- -----");
					}
					if (RoleCreateFeature != null)
					{
						ModMain.Log("RoleCreateFeature");
						List<ConfRoleCreateFeatureItem>.Enumerator enumerator6 = RoleCreateFeature._allConfList.GetEnumerator();
						while (enumerator6.MoveNext())
						{
							ConfRoleCreateFeatureItem current6 = enumerator6.Current;
							if (current6 != null && current6.id == 141)
							{
								ModMain.Log($"id: {current6.id}");
								ModMain.Log("Initial - duration: " + current6.duration);
								current6.duration = "1";
								ModMain.Log("Updated - duration: " + current6.duration);
							}
						}
						ModMain.Log("----- ----- ----- ----- -----");
					}
					if (RoleEffect != null)
					{
						ModMain.Log("RoleEffect");
						List<ConfRoleEffectItem>.Enumerator enumerator7 = RoleEffect._allConfList.GetEnumerator();
						while (enumerator7.MoveNext())
						{
							ConfRoleEffectItem current7 = enumerator7.Current;
							if (current7 != null)
							{
								switch (current7.id)
								{
								case 53011011:
								case 53011021:
								case 53011031:
								case 53011041:
								case 53011051:
								case 53011061:
								case 53011081:
								case 53011091:
									ModMain.Log($"id: {current7.id}");
									ModMain.Log($"effectType: {current7.effectType}");
									ModMain.Log("Initial - value: " + current7.value);
									current7.value = "fixValue_0_60";
									ModMain.Log("Updated - value: " + current7.value);
									break;
								case 53011071:
									ModMain.Log($"id: {current7.id}");
									ModMain.Log($"effectType: {current7.effectType}");
									ModMain.Log("Initial - value: " + current7.value);
									current7.value = "fixValue_exp_2000";
									ModMain.Log("Updated - value: " + current7.value);
									break;
								}
							}
						}
						ModMain.Log("----- ----- ----- ----- -----");
					}
					ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_artifact_spirit_super_buff_enabled"));
				}
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_artifact_spirit_super_buff_disabled"));
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_warning_restart_game_reset"));
			}
			bool IsAnyNull()
			{
				bool result = false;
				if (ArtifactShape == null)
				{
					ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_warning_artifactshape_null"));
					result = true;
				}
				if (ArtifactShapeCommon == null)
				{
					ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_warning_artifactshapecommon_null"));
					result = true;
				}
				if (ArtifactSprite == null)
				{
					ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_warning_artifactsprite_null"));
					result = true;
				}
				if (ArtifactSpriteArt == null)
				{
					ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_warning_artifactspriteart_null"));
					result = true;
				}
				if (ArtifactSpriteClose == null)
				{
					ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_warning_artifactspriteclose_null"));
					result = true;
				}
				if (ArtifactSpriteLevel == null)
				{
					ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_warning_artifactspritelevel_null"));
					result = true;
				}
				if (RoleCreateFeature == null)
				{
					ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_warning_rolecreatefeature_null"));
					result = true;
				}
				if (RoleEffect == null)
				{
					ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_warning_roleeffect_null"));
					result = true;
				}
				return result;
			}
		}, parent: contentHolder, name: "Artifact Spirit (Super Buff)", textKey: "panel_exploitmore_artifact_spirit_super_buff");
		toggle_ArtiSpiritBuff = tuple.Item1;
		text_ArtiSpiritBuff = tuple.Item2;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_ArtiSpiritFreeUp)
		{
			ExploitPatch_UnitActionSpriteTalentActive.IsThisActive = v_ArtiSpiritFreeUp;
			ConfArtifactSpriteTalent artifactSpriteTalent = Game.ConfMgr.artifactSpriteTalent;
			if (v_ArtiSpiritFreeUp && artifactSpriteTalent != null)
			{
				List<ConfArtifactSpriteTalentItem>.Enumerator enumerator = artifactSpriteTalent._allConfList.GetEnumerator();
				while (enumerator.MoveNext())
				{
					ConfArtifactSpriteTalentItem current = enumerator.Current;
					if (current != null)
					{
						if (current.unlock != "0")
						{
							ModMain.Log("Initial - unlock: " + current.unlock);
							current.unlock = "0";
							ModMain.Log("Updated - unlock: " + current.unlock);
						}
						if (current.unlock2Type == 0 && current.unlock2Value == "0" && current.unlock2Count == 0 && current.unlock3Type == 0 && current.unlock3Value == "0" && current.unlock3Count == 0)
						{
							if (current.activeCost != null)
							{
								for (int i = 0; i < current.activeCost.Length; i++)
								{
									Il2CppStructArray<int> il2CppStructArray = current.activeCost[i];
									if (il2CppStructArray != null)
									{
										ModMain.Log(string.Format("Initial - activeCost[{0}]: {1}", i, string.Join("_", il2CppStructArray)));
										if (il2CppStructArray.Length > 0)
										{
											il2CppStructArray[0] = 10001;
										}
										if (il2CppStructArray.Length > 1)
										{
											il2CppStructArray[1] = 0;
										}
										ModMain.Log(string.Format("Updated - activeCost[{0}]: {1}", i, string.Join("_", il2CppStructArray)));
									}
								}
							}
						}
						else
						{
							if (current.unlock2Type != 17)
							{
								ModMain.Log($"Initial - unlock2Type: {current.unlock2Type}");
								current.unlock2Type = 17;
								ModMain.Log($"Updated - unlock2Type: {current.unlock2Type}");
							}
							if (current.unlock2Value != "3")
							{
								ModMain.Log("Initial - unlock2Value: " + current.unlock2Value);
								current.unlock2Value = "3";
								ModMain.Log("Updated - unlock2Value: " + current.unlock2Value);
							}
							if (current.unlock2Count != 1)
							{
								ModMain.Log($"Initial - unlock2Count: {current.unlock2Count}");
								current.unlock2Count = 1;
								ModMain.Log($"Updated - unlock2Count: {current.unlock2Count}");
							}
							if (current.unlock3Type != 17)
							{
								ModMain.Log($"Initial - unlock3Type: {current.unlock3Type}");
								current.unlock3Type = 17;
								ModMain.Log($"Updated - unlock3Type: {current.unlock3Type}");
							}
							if (current.unlock3Value != "1")
							{
								ModMain.Log("Initial - unlock3Value: " + current.unlock3Value);
								current.unlock3Value = "1";
								ModMain.Log("Updated - unlock3Value: " + current.unlock3Value);
							}
							if (current.unlock3Count != 1)
							{
								ModMain.Log($"Initial - unlock3Count: {current.unlock3Count}");
								current.unlock3Count = 1;
								ModMain.Log($"Updated - unlock3Count: {current.unlock3Count}");
							}
							if (current.unlockDesc != "spriteTalent_unlockDesc100610")
							{
								ModMain.Log("Initial - unlockDesc: " + current.unlockDesc);
								current.unlockDesc = "spriteTalent_unlockDesc100610";
								ModMain.Log("Updated - unlockDesc: " + current.unlockDesc);
							}
						}
					}
				}
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_artifact_spirit_free_upgrade_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_artifact_spirit_free_upgrade_disabled"));
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_warning_restart_game_reset"));
			}
		}, parent: contentHolder, name: "Artifact Spirit (Free Skills/Talents Upgrade)", textKey: "panel_exploitmore_artifact_spirit_free_upgrade");
		toggle_ArtiSpiritFreeUp = tuple.Item1;
		text_ArtiSpiritFreeUp = tuple.Item2;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_ReducedWorship)
		{
			IsReducedWorshipActive = v_ReducedWorship;
			if (v_ReducedWorship)
			{
				g.events.On(EGameType.OpenUIEnd, callReducedWorshipUI, 0);
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_reduced_worship_activated"));
			}
			else
			{
				g.events.Off(EGameType.OpenUIEnd, callReducedWorshipUI);
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_reduced_worship_deactivated"));
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_warning_restart_game_reset"));
			}
		}, parent: contentHolder, name: "Reduced Worship Requirement", textKey: "panel_exploitmore_reduced_worship_requirement");
		toggle_ReducedWorship = tuple.Item1;
		text_ReducedWorship = tuple.Item2;
		callReducedWorshipUI = OnReducedWorshipUI;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_NoCostDungeon)
		{
			IsNoCostDungeonActive = v_NoCostDungeon;
			if (v_NoCostDungeon)
			{
				g.events.On(EGameType.OpenUIEnd, callNoCostDungeonUI, 0);
				if (Game.ConfMgr.dramaOptions != null)
				{
					List<ConfDramaOptionsItem>.Enumerator enumerator = Game.ConfMgr.dramaOptions._allConfList.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ConfDramaOptionsItem current = enumerator.Current;
						if (current != null && current.function == "useBuild10005" && current.cost != "0")
						{
							ModMain.Log($"id: {current.id}");
							ModMain.Log("Initial - cost: " + current.cost);
							if (!originalDungeonCosts.ContainsKey(current.id))
							{
								originalDungeonCosts[current.id] = current.cost;
							}
							current.cost = "0";
							ModMain.Log("Updated - cost: " + current.cost);
							ModMain.Log($"costHide: {current.costHide}");
							ModMain.Log("function: " + current.function);
							ModMain.Log("nextDialogue: " + current.nextDialogue);
							ModMain.Log($"optionsHide: {current.optionsHide}");
							ModMain.Log("text: " + current.text);
							ModMain.Log("----- ----- ----- ----- -----");
						}
					}
				}
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_no_day_item_dungeon_activated"));
			}
			else
			{
				g.events.Off(EGameType.OpenUIEnd, callNoCostDungeonUI);
				if (Game.ConfMgr.dramaOptions != null)
				{
					List<ConfDramaOptionsItem>.Enumerator enumerator = Game.ConfMgr.dramaOptions._allConfList.GetEnumerator();
					while (enumerator.MoveNext())
					{
						ConfDramaOptionsItem current2 = enumerator.Current;
						if (current2 != null && originalDungeonCosts.ContainsKey(current2.id))
						{
							ModMain.Log($"id: {current2.id}");
							ModMain.Log("Initial - cost: " + current2.cost);
							current2.cost = originalDungeonCosts[current2.id];
							ModMain.Log("Restored - cost: " + current2.cost);
							ModMain.Log($"costHide: {current2.costHide}");
							ModMain.Log("function: " + current2.function);
							ModMain.Log("nextDialogue: " + current2.nextDialogue);
							ModMain.Log($"optionsHide: {current2.optionsHide}");
							ModMain.Log("text: " + current2.text);
							ModMain.Log("----- ----- ----- ----- -----");
						}
					}
				}
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_no_day_item_dungeon_deactivated"));
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_warning_restart_game_reset"));
			}
		}, parent: contentHolder, name: "No Day/Item Requirement to Access World/Map Dungeon", textKey: "panel_exploitmore_no_day_item_requirement_dungeon");
		toggle_NoCostDungeon = tuple.Item1;
		text_NoCostDungeon = tuple.Item2;
		callNoCostDungeonUI = OnNoCostDungeonUI;
		tuple = CreateLocalizedToggle(onValueChanged: delegate(bool v_NoCDDungeon)
		{
			IsNoCDDungeonActive = v_NoCDDungeon;
			if (v_NoCDDungeon)
			{
				g.events.On(EGameType.OpenUIEnd, callNoCDDungeonUI, 0);
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_no_cooldown_dungeon"));
			}
			else
			{
				g.events.Off(EGameType.OpenUIEnd, callNoCDDungeonUI);
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_no_cooldown_dungeon"));
				ModMain.LogTip(LocalizationHelper.T("panel_exploit_warning_restart_game_reset"));
			}
		}, parent: contentHolder, name: "No Cooldown for World/Map Dungeon", textKey: "panel_exploitmore_no_cooldown_dungeon");
		toggle_NoCDDungeon = tuple.Item1;
		text_NoCDDungeon = tuple.Item2;
		callNoCDDungeonUI = OnNoCDDungeonUI;
		(toggle_ShortcutKey, text_ShortcutKey) = CreateLocalizedToggle(onValueChanged: delegate(bool v_ShortcutKey)
		{
			ModMain.ShortcutKey = v_ShortcutKey;
			if (v_ShortcutKey)
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_shortcut_key_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_shortcut_key_disabled"));
			}
		}, parent: contentHolder, name: "Shortcut Key", textKey: "panel_exploitmore_shortcut_key");
		(toggle_DisableDebug, text_DisableDebug) = CreateLocalizedToggle(onValueChanged: delegate(bool v_DisableDebug)
		{
			ModMain.StaticDeveloperMode = v_DisableDebug;
			ModMain.StaticMainLog = v_DisableDebug;
			if (v_DisableDebug)
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_debug_logging_enabled"));
			}
			else
			{
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_debug_logging_disabled"));
			}
		}, parent: contentHolder, name: "Debug Logging", textKey: "panel_exploitmore_debug_logging");
		toggle_DisableDebug.isOn = true;
		buttonTooltips[text_CombatPower.gameObject.GetComponent<RectTransform>()] = "tooltip_exploitmore_combat_power";
		buttonTooltips[text_BattleReport.gameObject.GetComponent<RectTransform>()] = "tooltip_exploitmore_battle_report";
		buttonTooltips[text_MultiItem.gameObject.GetComponent<RectTransform>()] = "tooltip_exploitmore_multi_item";
		buttonTooltips[text_Hospital.gameObject.GetComponent<RectTransform>()] = "tooltip_exploitmore_hospital";
		buttonTooltips[text_CheapArtRepair.gameObject.GetComponent<RectTransform>()] = "tooltip_exploitmore_cheap_art_repair";
		buttonTooltips[text_EasyArtiForge.gameObject.GetComponent<RectTransform>()] = "tooltip_exploitmore_easy_arti_forge";
		buttonTooltips[text_ArtiSpiritBuff.gameObject.GetComponent<RectTransform>()] = "tooltip_exploitmore_arti_spirit_buff";
		buttonTooltips[text_ArtiSpiritFreeUp.gameObject.GetComponent<RectTransform>()] = "tooltip_exploitmore_arti_spirit_free_up";
		buttonTooltips[text_ReducedWorship.gameObject.GetComponent<RectTransform>()] = "tooltip_exploitmore_reduced_worship";
		buttonTooltips[text_NoCostDungeon.gameObject.GetComponent<RectTransform>()] = "tooltip_exploitmore_no_cost_dungeon";
		buttonTooltips[text_NoCDDungeon.gameObject.GetComponent<RectTransform>()] = "tooltip_exploitmore_no_cd_dungeon";
		buttonTooltips[text_ShortcutKey.gameObject.GetComponent<RectTransform>()] = "tooltip_exploitmore_shortcut_key";
		buttonTooltips[text_DisableDebug.gameObject.GetComponent<RectTransform>()] = "tooltip_exploitmore_debug_logging";
		tooltip.Create();
		return (panelRoot: gameObject, draggableArea: gameObject2);
	}

	internal void OnCombatPowerUI(ETypeData e)
	{
		if (!(e.Cast<OpenUIEnd>().uiType.uiName == UIType.NPCInfo.uiName))
		{
			return;
		}
		UINPCInfo uI = g.ui.GetUI<UINPCInfo>(UIType.NPCInfo);
		if (uI != null)
		{
			int t = FormulaTool.UnitPower.SkillPower(uI.unit.data) + FormulaTool.UnitPower.PropPower(uI.unit.data) + FormulaTool.UnitPower.AttrPower(uI.unit.data);
			if (FormulaTool.UnitPower.unitTotalPowers.ContainsKey(uI.unit.data))
			{
				FormulaTool.UnitPower.unitTotalPowers[uI.unit.data].t1 = t;
			}
			int t2 = FormulaTool.UnitPower.SkillPower(Game.WorldManager.Value.playerUnit.data) + FormulaTool.UnitPower.PropPower(Game.WorldManager.Value.playerUnit.data) + FormulaTool.UnitPower.AttrPower(Game.WorldManager.Value.playerUnit.data);
			if (FormulaTool.UnitPower.unitTotalPowers.ContainsKey(Game.WorldManager.Value.playerUnit.data))
			{
				FormulaTool.UnitPower.unitTotalPowers[Game.WorldManager.Value.playerUnit.data].t1 = t2;
			}
			if (CombatPowerGO != null)
			{
				UnityEngine.Object.Destroy(CombatPowerGO);
				ModMain.Log("Destroyed previous CombatPowerGO.");
			}
			GameObject gameObject = UnityEngine.Object.Instantiate(uI.uiUnitInfo.textStand2.gameObject);
			Resolution currentResolution = Screen.currentResolution;
			float num = currentResolution.width;
			float num2 = currentResolution.height;
			float num3 = 480f / num * (float)Screen.width;
			float num4 = -500f / num2 * (float)Screen.height;
			Vector3 localPosition = new Vector3(uI.uiUnitInfo.goAppellationLuck.transform.localPosition.x + num3, uI.uiUnitInfo.goAppellationLuck.transform.localPosition.y + num4);
			gameObject.transform.SetParent(uI.uiUnitInfo.goAppellationLuck.transform.parent, worldPositionStays: false);
			gameObject.transform.localPosition = localPosition;
			gameObject.name = "CombatPower_1.1.8 Pub";
			gameObject.GetComponent<Text>().fontSize = 16;
			gameObject.GetComponentInChildren<Text>().supportRichText = true;
			gameObject.GetComponent<RectTransform>().sizeDelta = new Vector2(600f, 100f);
			gameObject.GetComponentInChildren<Text>().alignment = TextAnchor.MiddleLeft;
			string text = string.Format("<color=#4cd43d>{0}</color> <color=yellow>{1}</color> <color=red>{2}</color> <color=cyan>{3}</color> <color=yellow>{4}</color>", LocalizationHelper.T("panel_exploitmore_npc_combat_power"), t.ToString(), LocalizationHelper.T("panel_exploitmore_vs"), LocalizationHelper.T("panel_exploitmore_player_combat_power"), t2.ToString());
			string text2 = string.Format("<color=#4cd43d>{0}</color><color=yellow>{1}({2}, {3})</color>", LocalizationHelper.T("panel_exploitmore_npc_location"), GetLocationName(uI.unit), uI.unit.data.unitData?.pointX, uI.unit.data.unitData?.pointY);
			gameObject.GetComponentInChildren<Text>().text = text + "\r\n" + text2;
			CombatPowerGO = gameObject;
			gameObject.SetActive(IsCombatPowerActive);
		}
	}

	internal void OnBattleReportUI(ETypeData e)
	{
		if (!(e.Cast<OpenUIEnd>().uiType.uiName == UIType.BattleExit.uiName))
		{
			return;
		}
		UIBattleExit uI = g.ui.GetUI<UIBattleExit>(UIType.BattleExit);
		if (uI != null)
		{
			if (BattleReportGO != null)
			{
				UnityEngine.Object.Destroy(BattleReportGO);
				ModMain.Log("Destroyed previous BattleReportGO.");
			}
			GameObject gameObject = UnityEngine.Object.Instantiate(uI.textTip2.gameObject);
			gameObject.GetComponent<RectTransform>().sizeDelta = new Vector2(300f, 30f);
			Resolution currentResolution = Screen.currentResolution;
			float num = currentResolution.width;
			float num2 = currentResolution.height;
			Transform transform = uI.transform;
			float x = -105f / num * (float)Screen.width;
			float y = -85f / num2 * (float)Screen.height;
			Vector3 localPosition = new Vector3(x, y);
			gameObject.transform.SetParent(transform, worldPositionStays: false);
			gameObject.transform.localPosition = localPosition;
			gameObject.name = "BattleReport_1.1.8 Pub";
			gameObject.GetComponent<Text>().fontSize = 13;
			gameObject.GetComponentInChildren<Text>().supportRichText = true;
			gameObject.GetComponent<RectTransform>().sizeDelta = new Vector2(500f, 500f);
			gameObject.GetComponentInChildren<Text>().alignment = TextAnchor.MiddleLeft;
			gameObject.GetComponentInChildren<Text>().text = string.Format("<color=red>{0}:</color> <color=yellow>{1}</color> ", LocalizationHelper.T("panel_exploitmore_hits_received"), SceneType.battle.battleData.playerHitCount) + string.Format("\r\n<color=magenta>{0}:</color> <color=yellow>{1}</color> ", LocalizationHelper.T("panel_exploitmore_damage_taken"), SceneType.battle.battleData.playerHitValue) + string.Format("\r\n<color=#00ff00>{0}:</color> <color=yellow>{1}</color> ", LocalizationHelper.T("panel_exploitmore_damage_dealt"), SceneType.battle.battleData.playerAttackValue) + string.Format("\r\n<color=cyan>{0}:</color> <color=yellow>{1}</color>", LocalizationHelper.T("panel_exploitmore_battle_duration"), SceneType.battle.battleData.battleStayTime);
			BattleReportGO = gameObject;
			BattleReportGO.SetActive(IsBattleReportActive);
		}
	}

	internal string GetLocationName(WorldUnitBase unit)
	{
		if (unit.data.unitData.pointGridData == null)
		{
			return string.Empty;
		}
		return unit.data.unitData.pointGridData.type switch
		{
			MapTerrainType.None => "Unknown", 
			MapTerrainType.School => "Sect", 
			MapTerrainType.Town => "Town/City", 
			MapTerrainType.HonorVillage => "Village", 
			MapTerrainType.HonorHill => "Hill", 
			_ => "Outside", 
		};
	}

	internal void OnMultiItemUI(ETypeData e)
	{
		if (!IsMultiItemActive || !(e.Cast<OpenUIEnd>().uiType.uiName == UIType.PropInfo.uiName))
		{
			return;
		}
		UIPropInfo uI = g.ui.GetUI<UIPropInfo>(UIType.PropInfo);
		UIPlayerInfo uI2 = g.ui.GetUI<UIPlayerInfo>(UIType.PlayerInfo);
		if (uI != null && uI2 != null)
		{
			DataProps.PropsData propData = uI.propData;
			if (propData.propsType != DataProps.PropsDataType.Martial && g.world.playerUnit.data.unitData.GetAllEquipPropsSoleID().IndexOf(propData.soleID) <= -1)
			{
				AddMultiplyButton(uI.goOptionItem, uI.goOptionRoot.transform, propData, uI, uI2);
				return;
			}
		}
		if (!(uI != null) || !(ExploitPatch_UIDevilDemonBag._instance != null))
		{
			return;
		}
		DataProps.PropsData propData2 = uI.propData;
		if (propData2.propsType != DataProps.PropsDataType.Martial && propData2.values != null && propData2.values.Length > 2)
		{
			if (propData2.values[2] <= 100)
			{
				propData2.values[2] *= 5;
				ModMain.LogTip(string.Format(LocalizationHelper.T("panel_exploitmore_status_value_updated_items"), propData2.values[2]), null, 0.2f);
			}
			else
			{
				propData2.values[2]++;
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_plus_one_item"), null, 0.2f);
			}
		}
	}

	internal void AddMultiplyButton(GameObject template, Transform parent, DataProps.PropsData propItem, UIPropInfo PropUI, UIPlayerInfo PlayerUI)
	{
		string text = "goBtnMultiply";
		if (parent.Find(text) != null || propItem.propsInfoBase.sale == -1)
		{
			return;
		}
		Action clickAction = delegate
		{
			if (propItem.propsCount == 1)
			{
				if (propItem.values != null && propItem.values.Length > 2)
				{
					propItem.values[2]++;
					ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_plus_one_item"), null, 1f);
				}
				g.ui.CloseUI(UIType.PropInfo);
				PlayerUI.UpdateTypeUI(4);
			}
			else
			{
				Action<int, int> action = delegate(int _count, int _)
				{
					if (propItem.values != null && propItem.values.Length > 2)
					{
						propItem.values[2] += _count;
						ModMain.LogTip(string.Format("+{0} {1}", _count, LocalizationHelper.T("panel_exploitmore_status_item_truncated")), null, 1f);
					}
					g.ui.CloseUI(UIType.PropInfo);
					PlayerUI.UpdateTypeUI(4);
				};
				UIPropSelectCount uIPropSelectCount = g.ui.OpenUI<UIPropSelectCount>(UIType.PropSelectCount);
				uIPropSelectCount.InitData(0, propItem.propsCount, action, 0);
				uIPropSelectCount.SetIcon(propItem);
			}
		};
		CreateButton(template, parent, text, LocalizationHelper.T("panel_exploitmore_button_increase"), clickAction);
	}

	internal void CreateButton(GameObject template, Transform parent, string name, string text, Action clickAction, Vector3 posi = default(Vector3))
	{
		if (MultiItemGO != null)
		{
			UnityEngine.Object.Destroy(MultiItemGO);
			ModMain.Log("Destroyed previous MultiItemGO.");
		}
		GameObject gameObject = UnityEngine.Object.Instantiate(template, parent);
		gameObject.name = name;
		gameObject.transform.localPosition = posi;
		gameObject.GetComponentInChildren<Text>().text = text;
		Button componentInChildren = gameObject.GetComponentInChildren<Button>();
		componentInChildren.onClick.RemoveAllListeners();
		componentInChildren.onClick.AddListener(clickAction);
		MultiItemGO = gameObject;
		MultiItemGO.SetActive(IsMultiItemActive);
	}

	internal void OnReducedWorshipUI(ETypeData e)
	{
		if (!IsReducedWorshipActive || !(e.Cast<OpenUIEnd>().uiType.uiName == UIType.ImmortalAncestralHall.uiName))
		{
			return;
		}
		UIImmortalAncestralHall uI = g.ui.GetUI<UIImmortalAncestralHall>(UIType.ImmortalAncestralHall);
		if (uI != null)
		{
			ConfWorldBuilding10008Item building10008Item = uI.build10008Data.building10008Item;
			if (building10008Item != null && building10008Item.consecrateAmount > 1)
			{
				ModMain.Log($"id: {building10008Item.id}");
				ModMain.Log($"Initial - Worship Amount: {building10008Item.consecrateAmount}");
				building10008Item.consecrateAmount = 1;
				ModMain.Log($"Updated - Worship Amount: {building10008Item.consecrateAmount}");
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_reduced_worship_activated"), null, 3f);
			}
		}
	}

	internal void OnNoCostDungeonUI(ETypeData e)
	{
		if (!IsNoCostDungeonActive || !(e.Cast<OpenUIEnd>().uiType.uiName == UIType.Build10005.uiName))
		{
			return;
		}
		UIBuild10005 uI = g.ui.GetUI<UIBuild10005>(UIType.Build10005);
		if (uI != null)
		{
			ConfWorldBuilding10005Item building10005Item = uI.building10005Item;
			if (building10005Item != null && building10005Item.cost != "0")
			{
				ModMain.Log($"id: {building10005Item.id}");
				ModMain.Log("Initial - cost: " + building10005Item.cost);
				building10005Item.cost = "0";
				ModMain.Log("Updated - Cost: " + building10005Item.cost);
				uI.UpdateUI();
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_status_no_day_item_dungeon_activated"));
			}
		}
	}

	internal void OnNoCDDungeonUI(ETypeData e)
	{
		if (!IsNoCDDungeonActive || !(e.Cast<OpenUIEnd>().uiType.uiName == UIType.Build10005.uiName))
		{
			return;
		}
		UIBuild10005 uI = g.ui.GetUI<UIBuild10005>(UIType.Build10005);
		if (uI != null)
		{
			ConfWorldBuilding10005Item building10005Item = uI.building10005Item;
			if (building10005Item != null && building10005Item.cd >= 1)
			{
				ModMain.Log($"id: {building10005Item.id}");
				ModMain.Log($"Initial - cd: {building10005Item.cd}");
				building10005Item.cd = 0;
				ModMain.Log($"Updated - cd: {building10005Item.cd}");
				uI.UpdateUI();
				ModMain.LogTip(LocalizationHelper.T("panel_exploitmore_warning_no_cd_dungeon"));
			}
		}
	}

	private string GetTitleBarText()
	{
		string text = LocalizationHelper.T("common_cheatpanel");
		return "<b>" + text + "</b> - " + LocalizationHelper.T("panel_exploitmore_title");
	}

	private void UpdateUITexts()
	{
		if (titleBarText != null)
		{
			titleBarText.text = GetTitleBarText();
		}
		if (text_CombatPower != null)
		{
			text_CombatPower.text = LocalizationHelper.T("panel_exploitmore_compare_combat_power");
		}
		if (text_BattleReport != null)
		{
			text_BattleReport.text = LocalizationHelper.T("panel_exploitmore_show_battle_report");
		}
		if (text_MultiItem != null)
		{
			text_MultiItem.text = LocalizationHelper.T("panel_exploitmore_show_increase_button");
		}
		if (text_Hospital != null)
		{
			text_Hospital.text = LocalizationHelper.T("panel_exploitmore_rest_100_removes_destiny");
		}
		if (text_CheapArtRepair != null)
		{
			text_CheapArtRepair.text = LocalizationHelper.T("panel_exploitmore_low_cost_artifacts_repair");
		}
		if (text_EasyArtiForge != null)
		{
			text_EasyArtiForge.text = LocalizationHelper.T("panel_exploitmore_effortless_artifact_forge");
		}
		if (text_ArtiSpiritBuff != null)
		{
			text_ArtiSpiritBuff.text = LocalizationHelper.T("panel_exploitmore_artifact_spirit_super_buff");
		}
		if (text_ArtiSpiritFreeUp != null)
		{
			text_ArtiSpiritFreeUp.text = LocalizationHelper.T("panel_exploitmore_artifact_spirit_free_upgrade");
		}
		if (text_ReducedWorship != null)
		{
			text_ReducedWorship.text = LocalizationHelper.T("panel_exploitmore_reduced_worship_requirement");
		}
		if (text_NoCostDungeon != null)
		{
			text_NoCostDungeon.text = LocalizationHelper.T("panel_exploitmore_no_day_item_requirement_dungeon");
		}
		if (text_NoCDDungeon != null)
		{
			text_NoCDDungeon.text = LocalizationHelper.T("panel_exploitmore_no_cooldown_dungeon");
		}
		if (text_ShortcutKey != null)
		{
			text_ShortcutKey.text = LocalizationHelper.T("panel_exploitmore_shortcut_key");
		}
		if (text_DisableDebug != null)
		{
			text_DisableDebug.text = LocalizationHelper.T("panel_exploitmore_debug_logging");
		}
		if (CombatPowerGO != null && CombatPowerGO.activeSelf)
		{
			Text componentInChildren = CombatPowerGO.GetComponentInChildren<Text>();
			if (componentInChildren != null)
			{
				string text = componentInChildren.text;
				text = Regex.Replace(text, "<color=#4cd43d>.*?</color>", "<color=#4cd43d>" + LocalizationHelper.T("panel_exploitmore_npc_combat_power") + "</color>");
				text = Regex.Replace(text, "<color=red>.*?</color>", "<color=red>" + LocalizationHelper.T("panel_exploitmore_vs") + "</color>");
				text = Regex.Replace(text, "<color=cyan>.*?</color>", "<color=cyan>" + LocalizationHelper.T("panel_exploitmore_player_combat_power") + "</color>");
				text = Regex.Replace(text, "<color=#4cd43d>NPC.*?Location:.*?</color>", "<color=#4cd43d>" + LocalizationHelper.T("panel_exploitmore_npc_location") + "</color>");
				componentInChildren.text = text;
			}
		}
		if (BattleReportGO != null && BattleReportGO.activeSelf)
		{
			Text componentInChildren2 = BattleReportGO.GetComponentInChildren<Text>();
			if (componentInChildren2 != null)
			{
				string text2 = componentInChildren2.text;
				text2 = Regex.Replace(text2, "<color=red>.*?:</color>", "<color=red>" + LocalizationHelper.T("panel_exploitmore_hits_received") + ":</color>");
				text2 = Regex.Replace(text2, "<color=magenta>.*?:</color>", "<color=magenta>" + LocalizationHelper.T("panel_exploitmore_damage_taken") + ":</color>");
				text2 = Regex.Replace(text2, "<color=#00ff00>.*?:</color>", "<color=#00ff00>" + LocalizationHelper.T("panel_exploitmore_damage_dealt") + ":</color>");
				text2 = Regex.Replace(text2, "<color=cyan>.*?:</color>", "<color=cyan>" + LocalizationHelper.T("panel_exploitmore_battle_duration") + ":</color>");
				componentInChildren2.text = text2;
			}
		}
		if (MultiItemGO != null && MultiItemGO.activeSelf)
		{
			Text componentInChildren3 = MultiItemGO.GetComponentInChildren<Text>();
			if (componentInChildren3 != null)
			{
				componentInChildren3.text = LocalizationHelper.T("panel_exploitmore_button_increase");
			}
		}
	}
}
